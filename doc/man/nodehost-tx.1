.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH NODEHOST-TX "1" "January 2019" "nodehost-tx 1.0.0.4" "User Commands"
.SH NAME
nodehost-tx  manual page for nodehost-tx 1.0.0.4
.SH DESCRIPTION
NodeHost Core nodehosttx utility version 1.0.0.4
.SS "Usage:"
.TP
nodehosttx [options] <hextx> [commands]
Update hexencoded NodeHost transaction
.TP
nodehosttx [options] \fBcreate\fR [commands]
Create hexencoded NodeHost transaction
.SH OPTIONS
.HP
?
.IP
This help message
.HP
\fBcreate\fR
.IP
Create new, empty TX.
.HP
\fBjson\fR
.IP
Select JSON output
.HP
\fBtxid\fR
.IP
Output only the hexencoded transaction id of the resultant transaction.
.HP
\fBregtest\fR
.IP
Enter regression test mode, which uses a special chain in which blocks
can be solved instantly.
.HP
\fBtestnet\fR
.IP
Use the test network
.PP
Commands:
.IP
delin=N
.IP
Delete input N from TX
.IP
delout=N
.IP
Delete output N from TX
.IP
in=TXID:VOUT
.IP
Add input to TX
.IP
locktime=N
.IP
Set TX lock time to N
.IP
nversion=N
.IP
Set TX version to N
.IP
outaddr=VALUE:ADDRESS
.IP
Add addressbased output to TX
.IP
outscript=VALUE:SCRIPT
.IP
Add raw script output to TX
.IP
sign=SIGHASHFLAGS
.IP
Add zero or more signatures to transaction. This command requires JSON
registers:prevtxs=JSON object, privatekeys=JSON object. See
signrawtransaction docs for format of sighash flags, JSON objects.
.PP
Register Commands:
.IP
load=NAME:FILENAME
.IP
Load JSON file FILENAME into register NAME
.IP
set=NAME:JSONSTRING
.IP
Set register NAME to given JSONSTRING
.SH COPYRIGHT
Copyright (C) 2009-2019 The Bitcoin Core Developers

Copyright (C) 2014-2019 The Dash Core Developers

Copyright (C) 2015-2019 The PIVX Core Developers

Copyright (C) 2018-2019 The NodeHost Core Developers

This is experimental software.

Distributed under the MIT software license, see the accompanying file COPYING
or <http://www.opensource.org/licenses/mit-license.php>.

This product includes software developed by the OpenSSL Project for use in the
OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written
by Eric Young and UPnP software written by Thomas Bernard.
